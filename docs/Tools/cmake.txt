CMake
@see Google Docs/C++

Alternative: Premake

Generator: generates files for various IDEs / OS / Build Systems
https://cmake.org/documentation/


Usage:
Terminal / Command-Line / CLI:

$ mkdir build
$ cd build
$ cmake -G “Visual Studio 17 2022” ../

$ cmake --build .
$ cmake --build . --target help | all | clean | test | package | install –config Release

$ cmake -B build
$ cmake -P build.cmake -DCMAKE_BUILD_TYPE=Release



A basic CMakeLists.txt file:

cmake_minimum_required(VERSION 3.5 FATAL_ERROR)
project(MyProject LANGUAGES CXX)

# specify the C++ standard
set(CMAKE_CXX_STANDARD 11)
set(CMAKE_CXX_STANDARD_REQUIRED True)

add_subdirectory(...). # which contains a CMakeLists.txt

include(script)  # cmake-script file from ./cmake/modules/*.cmake

# add the binary tree to the search path for include files so that we will find TutorialConfig.h
# from: file:///C:/Program%20Files/CMake/doc/cmake/html/guide/tutorial/index.html
target_include_directories(Tutorial PUBLIC
                          "${PROJECT_BINARY_DIR}"
                          "${PROJECT_SOURCE_DIR}/MathFunctions")

# create a STATIC or SHARED | MODULE library
add_library(message STATIC Message.hpp Message.cpp )

# create an executable
add_executable(hello-world hello-world.cpp)

# link library to executable
target_link_libraries(hello-world message)


set(VAR “Hello World!”)

if(VAR)
    message(STATUS “${VAR}”)
    # elseif(...) else()
endif()

list(APPEND ...)
string(CONCAT | SUBSTRING | REPLACE | REGEX …)
file(WRITE | APPEND …)

function(...) endfunction()


# more:
set_property(GLOBAL PROPERTY USE_FOLDERS YES)
set_property(TARGET tgt PROPERTY CXX_STANDARD 11)
option(ENABLE_MODULE_SOURCE_GROUPS "Enable Module Source Groups" ON)
add_compile_options()
link_libraries()

add_custom_target()
set_target_properties()
target_sources()
target_include_directories()


# variables:
${CMAKE_CURRENT_LIST_DIR}
${CMAKE_SOURCE_DIR}
${PROJECT_BINARY_DIR}
${PROJECT_SOURCE_DIR}

# @see Documentation:
file:///C:/Program%20Files/CMake/doc/cmake/html/manual/cmake-variables.7.html
file:///C:/Program%20Files/CMake/doc/cmake/html/manual/cmake-language.7.html#cmake-language-variables
file:///C:/Program%20Files/CMake/doc/cmake/html/manual/cmake-env-variables.7.html
file:///C:/Program%20Files/CMake/doc/cmake/html/manual/cmake-properties.7.html

# vgl. Steinberg Media VST_SDK cmake-modules are prefixed by SMTG_* or smtg_* (makros or functions):
SMTG_PLUGIN_BINARY_DIR
SMTG_PLUGIN_EXTENSION
SMTG_PLUGIN_PACKAGE_NAME
# @see
https://github.com/steinbergmedia/vst3sdk
https://github.com/steinbergmedia/vst3sdk/blob/master/CMakeLists.txt
https://github.com/steinbergmedia/vst3_cmake/tree/0b9637435a4beef81bdb272a9cab4167300ad118


Files and Folders:

CMakeLists.txt

# Makros, Functions, Options, Includes (@vst3sdk):
/cmake/modules/SMTG_*.cmake

# build directory:
/build/CMakeFiles/CMakeOutput.log, CMakeError.log, TargetDirectories.txt
/build/cmake_install.cmake



JUCE CMake
https://github.com/juce-framework/JUCE/blob/master/examples/CMake/AudioPlugin/CMakeLists.txt
https://github.com/juce-framework/JUCE/blob/master/docs/CMake%20API.md

Example:
https://github.com/ffAudio/PluginGuiMagic/blob/main/examples/FoleysSynth/CMakeLists.txt


cmake_minimum_required(VERSION 3.15)
project(AUDIO_PLUGIN_EXAMPLE VERSION 0.0.1)

find_package(JUCE CONFIG REQUIRED)
# add_subdirectory(JUCE)

juce_add_plugin(AudioPluginExample
    # VERSION ...
    # ICON_BIG ...
    # ICON_SMALL ...
    # COMPANY_NAME ...
    # IS_SYNTH TRUE/FALSE
    # NEEDS_MIDI_INPUT TRUE/FALSE
    # NEEDS_MIDI_OUTPUT TRUE/FALSE
    # IS_MIDI_EFFECT TRUE/FALSE
    # EDITOR_WANTS_KEYBOARD_FOCUS TRUE/FALSE
    # COPY_PLUGIN_AFTER_BUILD TRUE/FALSE
    PLUGIN_MANUFACTURER_CODE Juce
    PLUGIN_CODE Dem0
    FORMATS AU VST3 Standalone
    PRODUCT_NAME "Audio Plugin Example")

juce_generate_juce_header(AudioPluginExample)

target_sources(AudioPluginExample
    PRIVATE
        PluginEditor.cpp
        PluginProcessor.cpp)

target_compile_definitions(AudioPluginExample
    PUBLIC
        JUCE_WEB_BROWSER=0
        JUCE_USE_CURL=0
        JUCE_VST3_CAN_REPLACE_VST2=0)

# juce_add_binary_data(AudioPluginData SOURCES ...)

target_link_libraries(AudioPluginExample
    PRIVATE
        # AudioPluginData           # If we'd created a binary data target, we'd link to it here
        juce::juce_audio_utils
    PUBLIC
        juce::juce_recommended_config_flags
        juce::juce_recommended_lto_flags
        juce::juce_recommended_warning_flags)

---

@see scripts/deploy

# CMake is a generator of buildsystems

# // Usage:
# mkdir build
# cd build
# cmake -G "Visual Studio 17 2022" ../
# // or:
# cmake ..
# cmake --build . --config Release
# // or:
# cmake -S .. -B .
#
# cmake --version

# Documentation:
# https://cmake.org/cmake/help/book/mastering-cmake/chapter/Writing%20CMakeLists%20Files.html
# https://trove.assistants.epita.fr/docs/cmake/
#
# https://www.jetbrains.com/help/clion/cmakelists-txt-file.html#cmakelist-template
# https://learn.microsoft.com/en-us/cpp/build/cmake-projects-in-visual-studio?view=msvc-170
# https://code.visualstudio.com/docs/cpp/cmake-quickstart

cmake_minimum_required(VERSION 3.18)
project(simple_example)

set(CMAKE_C_STANDARD 11)
set(CMAKE_CXX_STANDARD 17) # Enable C++17 standard

# Add source files
set(SOURCE_FILES main.cpp)

# Create targets
add_executable(simple_example ${SOURCE_FILES})
#add_library(lib_simple ${SOURCE_FILES})

# ---

# Linker
add_library(MathFunctions mysqrt.cxx)
target_link_libraries(simple_example PUBLIC MathFunctions)

include(scripts/setup_output_dirs.cmake)
add_subdirectory(src)

find_package()

